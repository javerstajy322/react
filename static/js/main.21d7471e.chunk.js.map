{"version":3,"sources":["components/Tickets/Ticket/Ticket.jsx","components/Controls/Controls.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ticket","props","react_default","a","createElement","className","key","src","alt","onClick","click","price","clickCounter","departure_time","origin","origin_name","departure_date","stops","arrival_time","destination_name","destination","arrival_date","Controls","_this","this","console","log","three","action","type","name","id","checked","all","onChange","update","zero","one","two","Component","App","state","tickets","ticketsAll","clickHandler","forEach","el","index","setState","changeHandler","allStops","values","v","Object","objectSpread","toConsumableArray","i","concat","filter","t","_this2","fetch","then","response","json","data","catch","error","_this3","ticketsObj","map","item","Ticket_Ticket","components_Controls_Controls","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21d7471e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Ticket.css\";\r\n\r\nconst ticket = props => (\r\n  <div className=\"TicketWrapper\" key>\r\n    <div className=\"ActionRow\">\r\n      <img src=\"\" alt=\"\" />\r\n      <button onClick={props.click}>Купить за {props.price}</button>\r\n      <div>click {props.clickCounter}</div>\r\n    </div>\r\n    <div className=\"TicketInfoRow\">\r\n      <div className=\"From\">\r\n        <h2>{props.departure_time}</h2>\r\n        <h3>\r\n          {props.origin}, {props.origin_name}\r\n        </h3>\r\n        <p>Посадка: {props.departure_date}</p>\r\n      </div>\r\n      <div className=\"PLANE\">\r\n        <div>пересадки {props.stops}</div>\r\n      </div>\r\n      <div className=\"Where\">\r\n        <h2>{props.arrival_time}</h2>\r\n        <h3>\r\n          {props.destination_name}, {props.destination}\r\n        </h3>\r\n        <p>Высадка: {props.arrival_date}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ticket;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Controls extends Component {\r\n\r\n\r\n  render() {\r\n    console.log(`This props three`, this.props.three)\r\n    return (\r\n      <div>\r\n        <form action=\"\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"all\"\r\n            id=\"\"\r\n            checked={this.props.all}\r\n            // Каждый новый чекбокс отправляет свой тип\r\n            // В идеале тебе нужно сделать компонент для чекбокса и избавиться от такой кучи кода, ну и проще будет поддерживать\r\n            onChange={() => this.props.update(-1)}\r\n          />{\" \"}\r\n          all\r\n          <br />\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"zero\"\r\n            id=\"\"\r\n            checked={this.props.zero}\r\n            onChange={() => this.props.update(0)}\r\n          />{\" \"}\r\n          0\r\n          <br />\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"one\"\r\n            id=\"\"\r\n            checked={this.props.one}\r\n            onChange={() => this.props.update(1)}\r\n          />{\" \"}\r\n          1\r\n          <br />\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"two\"\r\n            id=\"\"\r\n            checked={this.props.two}\r\n            onChange={() => this.props.update(2)}\r\n          />{\" \"}\r\n          2\r\n          <br />\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"three\"\r\n            id=\"\"\r\n            // У тебя тут опечатка, three был с заглавной и чекбокс не работал\r\n            checked={this.props.three}\r\n            onChange={() => this.props.update(3)}\r\n          />{\" \"}\r\n          3\r\n          <br />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controls;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport \"./components/Tickets/Tickets.css\";\nimport Ticket from \"./components/Tickets/Ticket/Ticket\";\n\n// import Tickets from \"./components/Tickets/Tickets\";\n// import ticketsObj from \"./components/Tickets/Tickets\";\n\nimport Controls from \"./components/Controls/Controls\";\n\nclass App extends Component {\n  state = {\n    all: false,\n    // Zero добавил в стейте для нулевого количества остановок, тебе нужно связать это с чекбоксом\n    zero: false,\n    one: false,\n    two: false,\n    three: false,\n    // В tickets у нас будут тикеты, которые мы показываем\n    tickets: [],\n    // Тут просто все тикеты\n    ticketsAll: []\n  };\n\n  clickHandler = id => {\n    const { tickets } = this.state;\n\n    tickets.forEach((el, index) => {\n      if (index === id) {\n        el.clickCounter = el.clickCounter + 1;\n        console.log(el.stops);\n        console.log(el);\n      }\n    });\n\n    this.setState({\n      tickets: tickets\n    });\n  };\n\n  changeHandler = type => {\n    // Пусть тут лежат все твои состояния в стейте\n    // В другом приложении тебе не нужно будет так делать потому что все твои данные должны быть связаны между собой изначально\n    // Иначе ты рискуешь застрять в подобной куче кода и постоянно натыкаться на ошибки\n    const allStops = ['zero', 'one', 'two', 'three']\n    // Если пришедший тип меньше одного - выбран тип ВСЕ\n    // В таком случае мы работаем только с чекбоксом all и делаем ретурн, так что код ниже ретурна не заработает\n    if (type === -1) {\n      const values = {}\n      // Если клик произошел на чекбокс\n      allStops.forEach(v => values[v] = false)\n      values['all'] = !this.state.all\n      this.setState({\n        // Если новое значение all = true, то отдаем все тикеты, иначе никаких\n        tickets: [...values.all ? this.state.ticketsAll : []],\n        ...values\n      })\n      return\n    }\n    let tickets = []\n    // Изначально в values наш старый стейт и all: false, так как пришедший тип не all\n    // В values будут лежать новые значения после кликов на чекбоксы, которые мы потом запишем в стейт\n    const values = { ...this.state, all: false }\n    allStops.forEach((stops, i) => {\n      // Здесь i - это индекс массива allStops, обозначающий количество остановок\n      // Если this.state['one'] или другой из массива равен true, мы берем индекс этого элемента в массиве как количество стопов\n      // и добавляем к существующему массиву из тикетов все тикеты содержащие количество стопов равное индексу текущего элемента\n      // И если индекс текущего элемента равен type, то это клик на чекбокс, так что меняем значение на противоположное\n      if (type === i) values[stops] = !this.state[stops]\n      if (values[stops]) {\n        // Если новое значение чекбокса true, то отдаем в массив с тикетами тикеты с соответствующим количеством стопов\n        tickets = tickets.concat(this.state.ticketsAll.filter(t => t.stops === i))\n      }\n    })\n    // Пишем наши новые переписанные значения в стейт и тикеты\n    this.setState({ ...values, tickets })\n  };\n\n  componentWillMount() {\n    fetch(\"/data/tickets.json\")\n      .then(response => response.json())\n      .then(data => {\n        console.log(\"data\", data); // обратите внимание на этот вывод\n        // По дефолту показываем 0 тикетов, так что tickets отсюда убираю\n        this.setState({ ticketsAll: data.tickets });\n      })\n      .catch(error => console.log(\"error\", error)); // этот выполнится в случае ошибки\n  }\n\n  render() {\n    const { tickets } = this.state;\n\n    const ticketsObj = tickets.map((item, index) => (\n      <Ticket\n        click={() => this.clickHandler(index)}\n        clickCounter={item.clickCounter}\n        key={index}\n        price={item.price}\n        departure_time={item.departure_time}\n        origin={item.origin}\n        origin_name={item.origin_name}\n        departure_date={item.departure_date}\n        stops={item.stops}\n        arrival_time={item.arrival_time}\n        destination_name={item.destination_name}\n        destination={item.destination}\n        arrival_date={item.arrival_date}\n      />\n    ));\n\n    // const sortTickets = ticketsObj.filter(stops => stops.stops === 0);\n\n    return (\n      <div className=\"App\">\n        <div>ico</div>\n        <div>\n          <Controls\n            all={this.state.all}\n            zero={this.state.zero}\n            one={this.state.one}\n            two={this.state.two}\n            three={this.state.three}\n            // Вместо четырех старых одинаковых методов делаю один общий\n            // И в качестве аргумента беру `type`, который отправлю изнутри Controls.jsx\n            update={this.changeHandler}\n          />\n        </div>\n        <div>\n          {ticketsObj}\n          {/* <Tickets/> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}