{"version":3,"sources":["components/Tickets/Ticket/Ticket.jsx","components/Tickets/Tickets.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ticket","props","react_default","a","createElement","className","key","src","alt","onClick","click","price","clickCounter","departure_time","origin","origin_name","departure_date","stops","arrival_time","destination_name","destination","arrival_date","Tickets","state","tickets","clickHandler","id","_this","forEach","el","index","setState","_this2","this","fetch","then","response","json","data","console","log","catch","error","_this3","_this$state","ticketsObj","map","item","Ticket_Ticket","React","Component","App","components_Tickets_Tickets","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAgCeA,qBA7BA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,KAAG,GAChCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAI,GAAGC,IAAI,KAChBN,EAAAC,EAAAC,cAAA,UAAQK,QAASR,EAAMS,OAAvB,qDAAyCT,EAAMU,OAC/CT,EAAAC,EAAAC,cAAA,oBAAYH,EAAMW,eAEpBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,gBACXX,EAAAC,EAAAC,cAAA,UACGH,EAAMa,OADT,KACmBb,EAAMc,aAEzBb,EAAAC,EAAAC,cAAA,wDAAaH,EAAMe,iBAErBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,qEAAgBH,EAAMgB,QAExBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMiB,cACXhB,EAAAC,EAAAC,cAAA,UACGH,EAAMkB,iBADT,KAC6BlB,EAAMmB,aAEnClB,EAAAC,EAAAC,cAAA,wDAAaH,EAAMoB,mBCiCZC,6MArDbC,MAAQ,CACNC,QAAS,MAGXC,aAAe,SAAAC,GAAM,IACXF,EAAYG,EAAKJ,MAAjBC,QAERA,EAAQI,QAAQ,SAACC,EAAIC,GACfA,IAAUJ,IACZG,EAAGjB,aAAeiB,EAAGjB,aAAe,KAIxCe,EAAKI,SAAS,CACZP,QAASA,yFAIQ,IAAAQ,EAAAC,KACnBC,MAAM,sBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,QAAQC,IAAI,OAAQF,GACpBN,EAAKD,SAAS,CAAEP,QAASc,EAAKd,YAE/BiB,MAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAI,QAASE,sCAGhC,IAAAC,EAAAV,KAAAW,EACoBX,KAAKV,MAAxBC,EADDoB,EACCpB,QAEFqB,GAHCD,EACUlC,MAEEc,EAAQsB,IAAI,SAACC,EAAMjB,GAAP,OAC7B5B,EAAAC,EAAAC,cAAC4C,EAAD,CACEtC,MAAO,kBAAMiC,EAAKlB,aAAaK,IAC/BlB,aAAcmC,EAAKnC,aACnBN,IAAKwB,EACLnB,MAAOoC,EAAKpC,MACZE,eAAgBkC,EAAKlC,eACrBC,OAAQiC,EAAKjC,OACbC,YAAagC,EAAKhC,YAClBC,eAAgB+B,EAAK/B,eACrBC,MAAO8B,EAAK9B,MACZC,aAAc6B,EAAK7B,aACnBC,iBAAkB4B,EAAK5B,iBACvBC,YAAa2B,EAAK3B,YAClBC,aAAc0B,EAAK1B,kBAIvB,OAAOnB,EAAAC,EAAAC,cAAA,WAAMyC,UAlDKI,IAAMC,WCebC,mLAZX,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAD,eAPQF,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.3f57e02d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Ticket.css\";\r\n\r\nconst ticket = props => (\r\n  <div className=\"TicketWrapper\" key>\r\n    <div className=\"ActionRow\">\r\n      <img src=\"\" alt=\"\" />\r\n      <button onClick={props.click}>Купить за {props.price}</button>\r\n      <div>click {props.clickCounter}</div>\r\n    </div>\r\n    <div className=\"TicketInfoRow\">\r\n      <div className=\"From\">\r\n        <h2>{props.departure_time}</h2>\r\n        <h3>\r\n          {props.origin}, {props.origin_name}\r\n        </h3>\r\n        <p>Посадка: {props.departure_date}</p>\r\n      </div>\r\n      <div className=\"PLANE\">\r\n        <div>пересадки {props.stops}</div>\r\n      </div>\r\n      <div className=\"Where\">\r\n        <h2>{props.arrival_time}</h2>\r\n        <h3>\r\n          {props.destination_name}, {props.destination}\r\n        </h3>\r\n        <p>Высадка: {props.arrival_date}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ticket;\r\n","import React from \"react\";\r\nimport \"./Tickets.css\";\r\n\r\nimport Ticket from \"./Ticket/Ticket\";\r\n\r\nclass Tickets extends React.Component {\r\n  state = {\r\n    tickets: []\r\n  };\r\n\r\n  clickHandler = id => {\r\n    const { tickets } = this.state;\r\n\r\n    tickets.forEach((el, index) => {\r\n      if (index === id) {\r\n        el.clickCounter = el.clickCounter + 1;\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      tickets: tickets\r\n    });\r\n  };\r\n\r\n  componentWillMount() {\r\n    fetch(\"/data/tickets.json\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(\"data\", data); // обратите внимание на этот вывод\r\n        this.setState({ tickets: data.tickets });\r\n      })\r\n      .catch(error => console.log(\"error\", error)); // этот выполнится в случае ошибки\r\n  }\r\n\r\n  render() {\r\n    const { tickets, click } = this.state;\r\n\r\n    const ticketsObj = tickets.map((item, index) => (\r\n      <Ticket\r\n        click={() => this.clickHandler(index)}\r\n        clickCounter={item.clickCounter}\r\n        key={index}\r\n        price={item.price}\r\n        departure_time={item.departure_time}\r\n        origin={item.origin}\r\n        origin_name={item.origin_name}\r\n        departure_date={item.departure_date}\r\n        stops={item.stops}\r\n        arrival_time={item.arrival_time}\r\n        destination_name={item.destination_name}\r\n        destination={item.destination}\r\n        arrival_date={item.arrival_date}\r\n      />\r\n    ));\r\n\r\n    return <div>{ticketsObj}</div>;\r\n  }\r\n}\r\n\r\nexport default Tickets;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Tickets from \"./components/Tickets/Tickets\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div>ico</div>\n        <div>Sort controlls</div>\n        <div>\n          <Tickets />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}